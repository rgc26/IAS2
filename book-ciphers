def create_indexed_book(book_text):
    words = book_text.split()
    word_index = {}
    for index, word in enumerate(words):
        if word not in word_index:
            word_index[word] = []
        word_index[word].append(index + 1)
    return word_index

def encode_message(message, book_index):
    encoded_message = []
    for word in message.split():
        if word in book_index:
            encoded_message.append(str(book_index[word][0]))  # Use the first occurrence
        else:
            raise ValueError(f"Word '{word}' not found in book text")
    return ' '.join(encoded_message)

def decode_message(encoded_message, book_text):
    words = book_text.split()
    word_list = []
    for index in encoded_message.split():
        word_list.append(words[int(index) - 1])
    return ' '.join(word_list)

# Sample book text (in a real scenario, this would be much longer)
book_text = "This is a sample book text used for the book cipher example."

# Message to encode
message = "This is a book text"

# Create the book index
book_index = create_indexed_book(book_text)

# Encode the message
encoded_message = encode_message(message, book_index)
print(f"Encoded Message: {encoded_message}")

# Decode the message
decoded_message = decode_message(encoded_message, book_text)
print(f"Decoded Message: {decoded_message}")
